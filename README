Engione is a web framework based on micro core principle.

Why Engione? A lot of brilliant frameworks in web based on best practice and use famous patterns. 
But many of these ones contain ton code that do not use in real cases. Extends are unclear. 
Inner processes are closed. Some lines of real code are wrapped with boring infrastructure. 
Engione is not silver bullet, of course, but just implements some ideas for fun and fast web coding. 
  
Engione separates into two parts: modules and sites. Modules provide data and logic. 
Sites represent information from modules. There are flows between modules and sites. It just MVC. 
But there is dynamic control of invocations between parts. Big brother of all modules is micro core module.
Micro core, just core, gets request from browser (or another subject) finds site, 
calls and site returns map of modules. Core executes all modules from map and renders this information 
with site’s specific behavior. It is simple but powerful.

Engione features:
•	Modularity principle
•	Multi sites paradigm
•	Multi language paradigm
•	Templates paradigm
•	Clear for extending
Engione based on PHP and can run in multi platforms.

All modules divided into parts: system and custom. System modules solve base problems 
(e.g. invoking others modules and rendering). Custom modules contain specific logic.
Any module contains initialization routine and logic execution routine. 
Core module can load and call any module and site. Also contains multi 
language supporting and simple templates implementation.
Site returns map of modules for receiving data and renders information.

Engione core structure (core/src):
1) modules
1.1) custom
1.2) system
1.2.1) core / core.php
1.2.2) logo / logo.php
1.2.3) templates / templates.php
2) sites
2.1) zero / zero.php
2.2) start.php
3) entry_point.php
4) index.php
There are custom modules in custom directory from modules. Any module there is own directory with php file. 
Directory name and php file must have equal names.
Core, logo and templates are system modules. Logo module provides data for default site after installation. 
Templates module provides the simplest mechanism of templates.
Zero represents templates for other sites.
Start.php – request controller.
Entry_point.php and index.php run core. 
Templates rules are simple. Template based on html and contains parts. Any part starts with 
“{%” in attributes or “<!--{%” in other places and finish with “%}” or “%}-->”. 
There are functions between tags “b”, “f”, “l”, ”r”. “b” function just insert value by name from data. 
“f” function call php-function and insert result. “l” function insert value from resources. 
“r” function repeat given part. For samples see default site.
All modules or sites may contain resources. Just there is resources.xml (or resources(Code of language).xml) 
in resources directory.
Reserved parameters for core in url. “s” – contains code of site. 
“p” – contains code of page in site. “l” – contains code of language. 
“u” – contains code of command to core (“r” command resets core). 
